// // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

function goBack() {
    window.location.href = "/index.html";
}


// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
window.addEventListener("load", () => {
    document.body.classList.add("loaded");
});

document.getElementById("backBtn").addEventListener("click", goBack);


//liderbord
let currentUser = null;

// –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
const CHARACTER_IMAGES = {
    'geek': '../img/geeksLogo.svg',
    'senior': '../img/geeks_pro.svg',
    'pro': '../img/geekStudio.svg'
};

// –ö–∞—Ä—Ç–∏–Ω–∫–∏
const birdImg = new Image();
// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
const selectedCharacter = localStorage.getItem('selectedCharacter') || 'geek';
birdImg.src = CHARACTER_IMAGES[selectedCharacter];

const bgImg = new Image();
bgImg.src = "../img/background.png";

let bgX = 0;
const bgSpeed = 0.5;
let animationId;
let isGameOver = false;

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// –ü—Ç–∏—Ü–∞
let bird = {
    x: canvas.width / 4,
    y: canvas.height / 2,
    width: 50,
    height: 80,
    gravity: 0.4,
    lift: -10,
    velocity: 0
};

// –¢—Ä—É–±—ã
let pipes = [];
let frame = 0;
let pipeGap = 1000;
let pipeWidth = 10;
let pipeSpeed = 1.0;
let pipeColor = "#FFD700";

// –°—á—ë—Ç –∏ –∫–æ–∏–Ω—ã
let score = 0;
let lastCoinReward = 0; // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Ä–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤
let coinsEarned = 0; // –ö–æ–∏–Ω—ã –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const gameOverModal = document.getElementById("gameOverModal");
const finalScore = document.getElementById("finalScore");
const restartBtn = document.getElementById("restartBtn");

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
const registrationModal = document.getElementById("registrationModal");
registrationModal.style.display = "flex";
const saveUserBtn = document.getElementById("saveUserBtn");

document.addEventListener("keydown", jump);
document.addEventListener("touchstart", jump);

function jump() {
    if (!isGameOver) {
        bird.velocity = bird.lift;
    }
}

function checkCoinReward() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤ 10 –æ—á–∫–æ–≤
    const currentThreshold = Math.floor(score / 10) * 10;
    if (currentThreshold > lastCoinReward) {
        coinsEarned += 150; // –î–æ–±–∞–≤–ª—è–µ–º 150 –∫–æ–∏–Ω–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–µ 10 –æ—á–∫–æ–≤
        lastCoinReward = currentThreshold;
    }
}

function gameOver() {
    isGameOver = true;
    cancelAnimationFrame(animationId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
    const currentUser = JSON.parse(localStorage.getItem("currentUser"));
    if (currentUser) {
        const leaderboard = JSON.parse(localStorage.getItem("leaderboard")) || [];
        const userEntry = leaderboard.find(entry =>
            entry.name === currentUser.name &&
            entry.phone === currentUser.phone
        );

        if (userEntry) {
            if (score > userEntry.score) {
                userEntry.score = score;
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–∏–Ω—ã
            userEntry.coins = (userEntry.coins || 0) + coinsEarned;
        } else {
            leaderboard.push({
                name: currentUser.name,
                phone: currentUser.phone,
                score: score,
                coins: coinsEarned
            });
        }

        localStorage.setItem("leaderboard", JSON.stringify(leaderboard));
    }

    finalScore.textContent = score;
    gameOverModal.classList.remove("hidden");
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function changeCharacter() {
    const selectedCharacter = localStorage.getItem('selectedCharacter') || 'geek';
    birdImg.src = CHARACTER_IMAGES[selectedCharacter];
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
function resetGame() {
    isGameOver = false;
    bird.y = canvas.height / 2;
    bird.velocity = 0;
    pipes = [];
    frame = 0;
    score = 0;
    lastCoinReward = 0;
    coinsEarned = 0;
    pipeGap = 300;
    pipeSpeed = 2.2;
    pipeColor = "#FFD700";
    gameOverModal.classList.add("hidden");
    const savedUser = localStorage.getItem("currentUser");
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    changeCharacter();
    gameLoop();
}

restartBtn.addEventListener("click", resetGame);

function update() {
    if (isGameOver) return;
    frame++;
    bird.velocity += bird.gravity;
    bird.y += bird.velocity;

    // –î–≤–∏–≥–∞—é—â–∏–π—Å—è —Ñ–æ–Ω
    bgX -= bgSpeed;
    if (bgX <= -canvas.width) {
        bgX = 0;
    }

    // –ù–æ–≤–∞—è —Ç—Ä—É–±–∞
    if (frame % 100 === 0) {
        let top = Math.random() * (canvas.height - pipeGap - 100);
        pipes.push({
            x: canvas.width,
            top,
            bottom: top + pipeGap,
            passed: false
        });
    }

    // –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (score >= 20) {
        pipeSpeed = 4.5;
        pipeGap = 140;
        pipeColor = "#90EE90"; // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
    } else if (score >= 10) {
        pipeSpeed = 3.2;
        pipeGap = 160;
        pipeColor = "#00BFFF"; // –≥–æ–ª—É–±–æ–π
    }

    // –î–≤–∏–∂–µ–Ω–∏–µ —Ç—Ä—É–± –∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    for (let i = pipes.length - 1; i >= 0; i--) {
        pipes[i].x -= pipeSpeed;

        if (
            bird.x + bird.width > pipes[i].x &&
            bird.x < pipes[i].x + pipeWidth &&
            (bird.y < pipes[i].top || bird.y + bird.height > pipes[i].bottom)
        ) {
            gameOver();
        }

        if (pipes[i].x + pipeWidth < 0) {
            pipes.splice(i, 1);
        }

        if (!pipes[i].passed && pipes[i].x + pipeWidth < bird.x) {
            pipes[i].passed = true;
            score++;
            checkCoinReward(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤
        }
    }

    if (bird.y + bird.height > canvas.height || bird.y < 0) {
        gameOver();
    }
}

function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // –§–æ–Ω
    ctx.drawImage(bgImg, bgX, 0, canvas.width, canvas.height);
    ctx.drawImage(bgImg, bgX + canvas.width, 0, canvas.width, canvas.height);

    // –ü—Ç–∏—Ü–∞
    ctx.drawImage(birdImg, bird.x, bird.y, bird.width, bird.height);

    // –¢—Ä—É–±—ã —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    pipes.forEach(pipe => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx.save();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        let glowColor;
        if (score >= 20) {
            glowColor = '#90EE90'; // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        } else if (score >= 10) {
            glowColor = '#00BFFF'; // –≥–æ–ª—É–±–æ–π
        } else {
            glowColor = '#FFD700'; // –∑–æ–ª–æ—Ç–æ–π
        }

        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        const gradientTop = ctx.createLinearGradient(pipe.x, 0, pipe.x + pipeWidth, 0);
        gradientTop.addColorStop(0, pipeColor);
        gradientTop.addColorStop(0.5, glowColor);
        gradientTop.addColorStop(1, pipeColor);

        // –í–µ—Ä—Ö–Ω—è—è —Ç—Ä—É–±–∞
        ctx.beginPath();
        ctx.roundRect(pipe.x, 0, pipeWidth, pipe.top, [0, 0, 10, 10]);
        ctx.fillStyle = pipeColor;
        ctx.fill();

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞
        ctx.shadowColor = glowColor;
        ctx.shadowBlur = 15;
        ctx.strokeStyle = glowColor;
        ctx.lineWidth = 2;
        ctx.stroke();

        // –ù–∏–∂–Ω—è—è —Ç—Ä—É–±–∞
        ctx.beginPath();
        ctx.roundRect(pipe.x, pipe.bottom, pipeWidth, canvas.height - pipe.bottom, [10, 10, 0, 0]);
        ctx.fill();
        ctx.stroke();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx.restore();
    });

    // –°—á—ë—Ç –∏ –∫–æ–∏–Ω—ã
    ctx.fillStyle = "#FFD700";
    ctx.font = "24px Arial";
    ctx.textAlign = "center";
    ctx.fillText(`–°—á—ë—Ç: ${score}`, canvas.width / 2, 40);
    ctx.fillText(`üí∞ –ö–æ–∏–Ω—ã: ${coinsEarned}`, canvas.width / 2, 70);
}

function gameLoop() {
    if (isGameOver) return;
    update();
    draw();
    animationId = requestAnimationFrame(gameLoop);
}

const savedUser = localStorage.getItem("currentUser");
if (savedUser) {
    currentUser = JSON.parse(savedUser);
    registrationModal.style.display = "none";
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
    changeCharacter();
    gameLoop();
} else {
    registrationModal.style.display = "flex";
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ localStorage
window.addEventListener('storage', (e) => {
    if (e.key === 'selectedCharacter') {
        changeCharacter();
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
saveUserBtn.addEventListener("click", () => {
    const name = document.getElementById("userName").value.trim();
    const phone = document.getElementById("userPhone").value.trim();

    const kyrgyzPhoneRegex = /^\+996\d{9}$/;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if (!name || !kyrgyzPhoneRegex.test(phone)) {
        alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (+996XXXXXXXXX)");
        return;
    }

    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currentUser = { name, phone, score: 0 };
    localStorage.setItem("currentUser", JSON.stringify(currentUser)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ API Bitrix24
    const apiUrl = "https://geektech.bitrix24.ru/rest/1/e08w1jvst0jj152c/crm.lead.add.json";

    const params = new URLSearchParams({
        "fields[SOURCE_ID]": 127,
        "fields[NAME]": name,
        "fields[TITLE]": "GEEKS GAME: –•–∞–∫–∞—Ç–æ–Ω 2025",
        "fields[PHONE][0][VALUE]": phone,
        "fields[PHONE][0][VALUE_TYPE]": "WORK"
    });

    fetch(`${apiUrl}?${params.toString()}`, {
        method: "GET",  // –ú–µ—Ç–æ–¥ GET –¥–ª—è API Bitrix24
    })
    .then(response => response.json())
    .then(data => {
        if (data.result) {
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            registrationModal.style.display = "none";  // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

            // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
            gameLoop(); // –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        } else {
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.");
        }
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
        alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    });
});
